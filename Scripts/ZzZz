-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?

-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?

-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?

-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?

-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?

-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?

-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?

-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?

-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?

-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?

-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?

-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?

-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?

-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?

-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?

-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?

-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?

-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?

-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?

-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?

-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?

-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?

-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?

-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?

-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?

-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?

-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?

-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?

-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?

-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?

-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?

-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?

-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?

-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?

-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?

-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?

-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?

-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
-- why bother skidding?
print("Mark is here :DD")


local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()
local HttpService = game:GetService("HttpService")
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local CollectionService = game:GetService("CollectionService")
local TeleportService = game:GetService("TeleportService")
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local LocalPlayer = Players.LocalPlayer
local PlayerGui = LocalPlayer:WaitForChild("PlayerGui")

_G.GrowAGardenESP = _G.GrowAGardenESP or {
    Enabled = true,
    WebhookUrl = "",
    LastNotified = {},
    AutoRejoinEnabled = false,
    AutoRejoinDelay = 5,
    SelectedPets = {},
    ConfigSaved = false,
    NotificationLog = {},
    RejoinAttempts = 0,
    MaxRejoinAttempts = 3
}

if not next(_G.GrowAGardenESP.SelectedPets) then
    for _, pet in ipairs({
        "Dragonfly", "Disco Bee", "Raccoon", "Bear Bee", "Mole", "Silver Monkey", "Moon Cat",
        "Praying Mantis", "Giant Ant", "Caterpillar", "Night Owl", "Polar Bear", "Red Fox", "Squirrel",
        "Butterfly", "Anti Bee", "Queen Bee", "Petal Bee", "Honey Bee", "Bee", "Chicken Zombie"
    }) do
        _G.GrowAGardenESP.SelectedPets[pet] = false
    end
end

local RARE_PETS = {
    "Dragonfly", "Disco Bee", "Raccoon", "Bear Bee", "Mole", "Silver Monkey", "Moon Cat",
    "Praying Mantis", "Giant Ant", "Caterpillar", "Night Owl", "Polar Bear", "Red Fox", "Squirrel",
    "Butterfly", "Anti Bee", "Queen Bee", "Petal Bee", "Honey Bee", "Bee", "Chicken Zombie"
}

local function saveConfig()
    local config = {
        Enabled = _G.GrowAGardenESP.Enabled,
        WebhookUrl = _G.GrowAGardenESP.WebhookUrl,
        AutoRejoinEnabled = _G.GrowAGardenESP.AutoRejoinEnabled,
        AutoRejoinDelay = _G.GrowAGardenESP.AutoRejoinDelay,
        SelectedPets = _G.GrowAGardenESP.SelectedPets,
        MaxRejoinAttempts = _G.GrowAGardenESP.MaxRejoinAttempts
    }
    local success, encoded = pcall(HttpService.JSONEncode, HttpService, config)
    if success then
        writefile("GrowAGardenESP_Config.json", encoded)
        _G.GrowAGardenESP.ConfigSaved = true
    end
end

local function loadConfig()
    if isfile("GrowAGardenESP_Config.json") then
        local success, data = pcall(readfile, "GrowAGardenESP_Config.json")
        if success then
            Rayfield:Notify({ Title = "Loading Config", Content = "Configuration is being loaded...", Duration = 2 })
            local decoded = HttpService:JSONDecode(data)
            _G.GrowAGardenESP.Enabled = decoded.Enabled or true
            _G.GrowAGardenESP.WebhookUrl = decoded.WebhookUrl or ""
            _G.GrowAGardenESP.AutoRejoinEnabled = decoded.AutoRejoinEnabled or false
            _G.GrowAGardenESP.AutoRejoinDelay = decoded.AutoRejoinDelay or 5
            _G.GrowAGardenESP.MaxRejoinAttempts = decoded.MaxRejoinAttempts or 3
            for pet, value in pairs(decoded.SelectedPets or {}) do
                if _G.GrowAGardenESP.SelectedPets[pet] ~= nil then
                    _G.GrowAGardenESP.SelectedPets[pet] = value
                end
            end
            _G.GrowAGardenESP.ConfigSaved = true
            Rayfield:Notify({ Title = "Config Loaded", Content = "Configuration loaded successfully!", Duration = 3 })
        else
            Rayfield:Notify({ Title = "Config Error", Content = "Failed to load configuration.", Duration = 3 })
        end
    end
end

loadConfig()

local function validateWebhook(url)
    if url == "" then return false end
    local request = (syn and syn.request) or (http and http.request) or (http_request) or (request)
    if not request then return false end
    local success, result = pcall(request, {
        Url = url,
        Method = "GET"
    })
    return success and result and result.StatusCode >= 200 and result.StatusCode < 300
end

local function sendWebhook(data)
    if not data or type(data) ~= "table" then return false end
    local json
    local success, result = pcall(function()
        return HttpService:JSONEncode(data)
    end)
    if not success then return false end
    json = result
    local request = (syn and syn.request) or (http and http.request) or (http_request) or (request)
    if not request then return false end
    success, result = pcall(request, {
        Url = _G.GrowAGardenESP.WebhookUrl,
        Method = "POST",
        Headers = {["Content-Type"] = "application/json"},
        Body = json
    })
    return success and result and result.StatusCode >= 200 and result.StatusCode < 300
end

local function testWebhook()
    local testData = {
        embeds = {{
            title = "Test Webhook",
            description = "This is a test notification from PolleserHub!",
            color = 0x00FF00,
            timestamp = DateTime.now():ToIsoDate(),
            footer = { text = "Pet Notifier by Polleser" }
        }},
        username = "Polleser Hub",
        avatar_url = "https://cdn.discordapp.com/attachments/1320056693069185105/1381307158620012614/image-11.png?ex=68470a0a&is=6845b88a&hm=5f0eeafd527427bafd57bc2c8a0a45014e90a78afee8a086ae73430d0e1ea09b&"
    }
    if sendWebhook(testData) then
        Rayfield:Notify({ Title = "Webhook Test", Content = "Test webhook sent successfully!", Duration = 3 })
        table.insert(_G.GrowAGardenESP.NotificationLog, { Time = os.time(), Message = "Test webhook sent successfully" })
    else
        Rayfield:Notify({ Title = "Webhook Test Failed", Content = "Failed to send test webhook.", Duration = 3 })
        table.insert(_G.GrowAGardenESP.NotificationLog, { Time = os.time(), Message = "Failed to send test webhook" })
    end
end

local function isRarePet(petName)
    return table.find(RARE_PETS, petName) ~= nil
end

local function notifyRarePet(petName, eggName)
    if _G.GrowAGardenESP.WebhookUrl == "" then return end
    if _G.GrowAGardenESP.LastNotified[petName] and os.time() - _G.GrowAGardenESP.LastNotified[petName] < 300 then return end
    local embed = {
        {
            title = "🎉 Good Pet Appeared! 🎉",
            description = string.format("You hatched a **%s** from a **%s** egg!", petName, eggName),
            color = 0x00FF00,
            fields = {
                { name = "Game", value = string.format("[%s](https://www.roblox.com/games/%d)", game:GetService("MarketplaceService"):GetProductInfo(game.PlaceId).Name, game.PlaceId), inline = true },
                { name = "Player", value = LocalPlayer.Name, inline = true },
                { name = "Server", value = game.JobId, inline = true }
            },
            timestamp = DateTime.now():ToIsoDate(),
            footer = { text = "Pet Notifier by Polleser" }
        }
    }
    if sendWebhook({ embeds = embed, username = "Polleser Hub", avatar_url = "https://cdn.discordapp.com/attachments/1320056693069185105/1381307158620012614/image-11.png?ex=68470a0a&is=6845b88a&hm=5f0eeafd527427bafd57bc2c8a0a45014e90a78afee8a086ae73430d0e1ea09b&" }) then
        _G.GrowAGardenESP.LastNotified[petName] = os.time()
        table.insert(_G.GrowAGardenESP.NotificationLog, { Time = os.time(), Message = string.format("Hatched %s from %s egg", petName, eggName) })
        if #_G.GrowAGardenESP.NotificationLog > 10 then
            table.remove(_G.GrowAGardenESP.NotificationLog, 1)
        end
    end
end

local function createCustomNotification(petName)
    local notificationGui = Instance.new("ScreenGui")
    notificationGui.Name = "PetNotification"
    notificationGui.Parent = PlayerGui
    notificationGui.ResetOnSpawn = false
    local notificationFrame = Instance.new("Frame")
    notificationFrame.Size = UDim2.new(0, 200, 0, 80)
    notificationFrame.Position = UDim2.new(1, -210, 1, -90)
    notificationFrame.BackgroundColor3 = Color3.fromRGB(25, 25, 35)
    notificationFrame.BackgroundTransparency = 0.2
    notificationFrame.BorderSizePixel = 0
    notificationFrame.Parent = notificationGui
    local uiCorner = Instance.new("UICorner")
    uiCorner.CornerRadius = UDim.new(0, 8)
    uiCorner.Parent = notificationFrame
    local gradient = Instance.new("UIGradient")
    gradient.Color = ColorSequence.new({ ColorSequenceKeypoint.new(0, Color3.fromRGB(80, 40, 150)), ColorSequenceKeypoint.new(1, Color3.fromRGB(40, 80, 180)) })
    gradient.Rotation = 45
    gradient.Parent = notificationFrame
    local title = Instance.new("TextLabel")
    title.Size = UDim2.new(1, -10, 0, 20)
    title.Position = UDim2.new(0, 5, 0, 5)
    title.BackgroundTransparency = 1
    title.Text = "🎉 Selected Pet Appeared!"
    title.TextColor3 = Color3.fromRGB(255, 255, 255)
    title.TextScaled = true
    title.Font = Enum.Font.GothamBold
    title.TextSize = 16
    title.Parent = notificationFrame
    local description = Instance.new("TextLabel")
    description.Size = UDim2.new(1, -10, 0, 40)
    description.Position = UDim2.new(0, 5, 0, 30)
    description.BackgroundTransparency = 1
    description.Text = string.format("You hatched a selected pet: %s", petName)
    description.TextColor3 = Color3.fromRGB(200, 200, 255)
    description.TextScaled = true
    description.Font = Enum.Font.Gotham
    description.TextSize = 14
    description.TextWrapped = true
    description.Parent = notificationFrame
    notificationFrame.Position = UDim2.new(1, 0, 1, -90)
    local tweenIn = TweenService:Create(notificationFrame, TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), { Position = UDim2.new(1, -210, 1, -90) })
    tweenIn:Play()
    task.spawn(function()
        task.wait(5)
        local tweenOut = TweenService:Create(notificationFrame, TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.In), { Position = UDim2.new(1, 0, 1, -90) })
        tweenOut:Play()
        tweenOut.Completed:Wait()
        notificationGui:Destroy()
    end)
    table.insert(_G.GrowAGardenESP.NotificationLog, { Time = os.time(), Message = string.format("Selected pet %s hatched", petName) })
    if #_G.GrowAGardenESP.NotificationLog > 10 then
        table.remove(_G.GrowAGardenESP.NotificationLog, 1)
    end
end

local Window = Rayfield:CreateWindow({
    Name = "Pet Esp | PolleserHub",
    LoadingTitle = "Grow A Garden ESP",
    LoadingSubtitle = "by Polleser",
    ConfigurationSaving = { Enabled = true, FolderName = "PolleserHub", FileName = "GrowAGardenESP" },
    Discord = { Enabled = false },
    KeySystem = false
})

local MainTab = Window:CreateTab("Main", "star")
local espToggle = MainTab:CreateToggle({
    Name = "ESP",
    CurrentValue = _G.GrowAGardenESP.Enabled,
    Callback = function(Value)
        _G.GrowAGardenESP.Enabled = Value
        saveConfig()
    end
})

local webhookInput = MainTab:CreateInput({
    Name = "Discord Webhook URL (for pet notifier)",
    PlaceholderText = "Enter Webhook URL",
    CurrentValue = _G.GrowAGardenESP.WebhookUrl,
    Callback = function(Value)
        _G.GrowAGardenESP.WebhookUrl = Value
        task.spawn(function()
            if validateWebhook(Value) then
                Rayfield:Notify({ Title = "Webhook Valid", Content = "Webhook URL is valid!", Duration = 3 })
            else
                Rayfield:Notify({ Title = "Webhook Invalid", Content = "Please enter a valid webhook URL.", Duration = 3 })
            end
            saveConfig()
        end)
    end
})

local testWebhookButton = MainTab:CreateButton({
    Name = "Test Webhook",
    Callback = function()
        testWebhook()
    end
})

local autoRejoinToggle = MainTab:CreateToggle({
    Name = "Auto-Rejoin",
    CurrentValue = _G.GrowAGardenESP.AutoRejoinEnabled,
    Callback = function(Value)
        _G.GrowAGardenESP.AutoRejoinEnabled = Value
        _G.GrowAGardenESP.RejoinAttempts = 0
        saveConfig()
    end
})

local autoRejoinSlider = MainTab:CreateSlider({
    Name = "Auto-Rejoin Delay (Seconds)",
    Range = {5, 30},
    Increment = 5,
    CurrentValue = _G.GrowAGardenESP.AutoRejoinDelay,
    Callback = function(Value)
        _G.GrowAGardenESP.AutoRejoinDelay = Value
        saveConfig()
    end
})

local rejoinButton = MainTab:CreateButton({
    Name = "Rejoin Server",
    Callback = function()
        local success, errorMsg = pcall(function()
            TeleportService:TeleportToPlaceInstance(game.PlaceId, game.JobId, LocalPlayer)
        end)
        if not success then
            Rayfield:Notify({ Title = "Error", Content = "Failed to rejoin server: " .. errorMsg, Duration = 3 })
            table.insert(_G.GrowAGardenESP.NotificationLog, { Time = os.time(), Message = "Failed to rejoin server: " .. errorMsg })
            if #_G.GrowAGardenESP.NotificationLog > 10 then
                table.remove(_G.GrowAGardenESP.NotificationLog, 1)
            end
            updateNotificationLog()
        end
    end
})

MainTab:CreateSection("Rejoin Stuff")
MainTab:CreateLabel("It is a must to keep the rejoin delay at a good secs so you can turn it off")

local PetTab = Window:CreateTab("Pet Selection", "paw-print")
PetTab:CreateSection("Pet Stuff")
local petDropdown = PetTab:CreateDropdown({
    Name = "Select Pets",
    Options = RARE_PETS,
    CurrentOption = {},
    MultipleOptions = true,
    Callback = function(Selected)
        task.delay(0.1, function()
            for pet, _ in pairs(_G.GrowAGardenESP.SelectedPets) do
                _G.GrowAGardenESP.SelectedPets[pet] = false
            end
            for _, pet in ipairs(Selected) do
                _G.GrowAGardenESP.SelectedPets[pet] = true
            end
            saveConfig()
        end)
    end
})

local deselectAllButton = PetTab:CreateButton({
    Name = "Deselect All Pets",
    Callback = function()
        for pet, _ in pairs(_G.GrowAGardenESP.SelectedPets) do
            _G.GrowAGardenESP.SelectedPets[pet] = false
        end
        petDropdown:Set({})
        saveConfig()
    end
})

local NotificationTab = Window:CreateTab("Notification Log", "list")
NotificationTab:CreateSection("Notifications")
local notificationLogLabel = NotificationTab:CreateLabel("Recent Notifications")
local clearLogButton = NotificationTab:CreateButton({
    Name = "Clear Notification Log",
    Callback = function()
        _G.GrowAGardenESP.NotificationLog = {}
        updateNotificationLog()
    end
})

local function updateNotificationLog()
    local logText = "Recent Notifications:\n"
    for _, log in ipairs(_G.GrowAGardenESP.NotificationLog) do
        local timeStr = os.date("%H:%M:%S", log.Time)
        logText = logText .. string.format("[%s] %s\n", timeStr, log.Message)
    end
    notificationLogLabel:Set(logText)
end

local function syncDropdownWithSelectedPets()
    local selected = {}
    for pet, isSelected in pairs(_G.GrowAGardenESP.SelectedPets) do
        if isSelected then
            table.insert(selected, pet)
        end
    end
    petDropdown:Set(selected)
end
syncDropdownWithSelectedPets()

local espCache = {}
local function getHatchData()
    local success, hatchFunction = pcall(function()
        return getupvalue(getupvalue(getconnections(ReplicatedStorage.GameEvents.PetEggService.OnClientEvent)[1].Function, 1), 2)
    end)
    if success and hatchFunction then
        return hatchFunction, getupvalue(hatchFunction, 1), getupvalue(hatchFunction, 2)
    end
    return nil, nil, nil
end

local hatchFunction, eggModels, eggPets = getHatchData()

local function getObjectFromId(objectId)
    if not eggModels then return end
    for eggModel in eggModels do
        if eggModel:GetAttribute("OBJECT_UUID") ~= objectId then continue end
        return eggModel
    end
end

local function CreateEspGui(object, text, isRare)
    local billboard = Instance.new("BillboardGui")
    billboard.Name = "PetEggESP"
    billboard.Adornee = object:FindFirstChildWhichIsA("BasePart") or object.PrimaryPart or object
    billboard.Size = UDim2.new(0, 150, 0, 30)
    billboard.StudsOffset = Vector3.new(0, 2.5, 0)
    billboard.AlwaysOnTop = true
    local label = Instance.new("TextLabel")
    label.Size = UDim2.new(1, 0, 1, 0)
    label.BackgroundTransparency = 1
    label.Text = text
    label.TextColor3 = isRare and Color3.new(0, 1, 1) or Color3.new(1, 1, 1)
    label.TextStrokeTransparency = 0.5
    label.TextStrokeColor3 = isRare and Color3.new(0, 0, 1) or Color3.new(0, 0, 0)
    label.TextScaled = true
    label.Font = Enum.Font.GothamBold
    label.Parent = billboard
    billboard.Parent = object
    return billboard
end

local function hasSelectedPetEgg()
    for _, billboard in pairs(espCache) do
        local label = billboard:FindFirstChildOfClass("TextLabel")
        if label then
            local currentPetName = label.Text:match("| (.+)$"):gsub("%s+", "")
            if _G.GrowAGardenESP.SelectedPets[currentPetName] then
                return true
            end
        end
    end
    return false
end

local rejoinTask = nil
local pauseRejoin = false
task.spawn(function()
    while true do
        if _G.GrowAGardenESP.AutoRejoinEnabled and not hasSelectedPetEgg() and not pauseRejoin and _G.GrowAGardenESP.RejoinAttempts < _G.GrowAGardenESP.MaxRejoinAttempts then
            if rejoinTask then
                rejoinTask:Cancel()
            end
            rejoinTask = task.spawn(function()
                wait(_G.GrowAGardenESP.AutoRejoinDelay)
                if _G.GrowAGardenESP.AutoRejoinEnabled and not hasSelectedPetEgg() and not pauseRejoin then
                    local success, errorMsg = pcall(function()
                        TeleportService:TeleportToPlaceInstance(game.PlaceId, game.JobId, LocalPlayer)
                    end)
                    if not success then
                        _G.GrowAGardenESP.RejoinAttempts = _G.GrowAGardenESP.RejoinAttempts + 1
                        Rayfield:Notify({ Title = "Error", Content = string.format("Failed to rejoin server: %s (Attempt %d/%d)", errorMsg, _G.GrowAGardenESP.RejoinAttempts, _G.GrowAGardenESP.MaxRejoinAttempts), Duration = 3 })
                        table.insert(_G.GrowAGardenESP.NotificationLog, { Time = os.time(), Message = string.format("Failed to rejoin server: %s (Attempt %d/%d)", errorMsg, _G.GrowAGardenESP.RejoinAttempts, _G.GrowAGardenESP.MaxRejoinAttempts) })
                        if #_G.GrowAGardenESP.NotificationLog > 10 then
                            table.remove(_G.GrowAGardenESP.NotificationLog, 1)
                        end
                        updateNotificationLog()
                        if _G.GrowAGardenESP.RejoinAttempts >= _G.GrowAGardenESP.MaxRejoinAttempts then
                            _G.GrowAGardenESP.AutoRejoinEnabled = false
                            autoRejoinToggle:Set(false)
                            Rayfield:Notify({ Title = "Auto-Rejoin Disabled", Content = "Max rejoin attempts reached. Auto-rejoin disabled.", Duration = 5 })
                        end
                    else
                        _G.GrowAGardenESP.RejoinAttempts = 0
                    end
                end
            end)
        end
        wait(0.5)
    end
end)

local function UpdateEsp(objectId, petName)
    local object = getObjectFromId(objectId)
    if not object or not espCache[objectId] then return end
    local eggName = object:GetAttribute("EggName")
    local labelGui = espCache[objectId]
    if labelGui and labelGui:FindFirstChildOfClass("TextLabel") then
        labelGui.TextLabel.Text = string.format("%s | %s", eggName, petName)
        labelGui.TextLabel.TextColor3 = isRarePet(petName) and Color3.new(0, 1, 1) or Color3.new(1, 1, 1)
        labelGui.TextLabel.TextStrokeColor3 = isRarePet(petName) and Color3.new(0, 0, 1) or Color3.new(0, 0, 0)
        if isRarePet(petName) then
            notifyRarePet(petName, eggName)
            updateNotificationLog()
        end
        if _G.GrowAGardenESP.SelectedPets[petName] then
            pauseRejoin = true
            task.delay(10, function() pauseRejoin = false end)
            createCustomNotification(petName)
            updateNotificationLog()
        end
    end
end

local function AddEsp(object)
    if object:GetAttribute("OWNER") ~= LocalPlayer.Name then return end
    local eggName = object:GetAttribute("EggName")
    local petName = eggPets and eggPets[object:GetAttribute("OBJECT_UUID")] or "?"
    local objectId = object:GetAttribute("OBJECT_UUID")
    if not objectId then return end
    local esp = CreateEspGui(object, string.format("%s | %s", eggName, petName), isRarePet(petName))
    espCache[objectId] = esp
end

local function RemoveEsp(object)
    if object:GetAttribute("OWNER") ~= LocalPlayer.Name then return end
    local objectId = object:GetAttribute("OBJECT_UUID")
    if espCache[objectId] then
        espCache[objectId]:Destroy()
        espCache[objectId] = nil
    end
end

if _G.GrowAGardenESP.Enabled and hatchFunction then
    for _, object in CollectionService:GetTagged("PetEggServer") do
        task.spawn(AddEsp, object)
    end
    CollectionService:GetInstanceAddedSignal("PetEggServer"):Connect(AddEsp)
    CollectionService:GetInstanceRemovedSignal("PetEggServer"):Connect(RemoveEsp)
end

if ReplicatedStorage.GameEvents:FindFirstChild("EggReadyToHatch_RE") then
    ReplicatedStorage.GameEvents.EggReadyToHatch_RE.OnClientEvent:Connect(function(objectId, petName)
        if _G.GrowAGardenESP.Enabled then
            UpdateEsp(objectId, petName)
        end
    end)
end

espToggle:Set(_G.GrowAGardenESP.Enabled)
webhookInput:Set(_G.GrowAGardenESP.WebhookUrl)
autoRejoinToggle:Set(_G.GrowAGardenESP.AutoRejoinEnabled)
autoRejoinSlider:Set(_G.GrowAGardenESP.AutoRejoinDelay)
updateNotificationLog()
