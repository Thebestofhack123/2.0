local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Players = game:GetService("Players")
local TPS = game:GetService("TeleportService")
local RunService = game:GetService("RunService")
local LocalPlayer = Players.LocalPlayer
local rollbackEnabled = false
local originalStats = {}
local lagDelay = 0.5
local heartbeatConnections = {}
local steppedConnections = {}
local renderConnections = {}

local function MegaLag()
    for _,v in pairs(getconnections(game:GetService("RunService").Heartbeat)) do
        table.insert(heartbeatConnections, v)
        v:Disable()
    end
    
    for _,v in pairs(getconnections(game:GetService("RunService").Stepped)) do
        table.insert(steppedConnections, v)
        v:Disable()
    end
    
    for _,v in pairs(getconnections(game:GetService("RunService").RenderStepped)) do
        table.insert(renderConnections, v)
        v:Disable()
    end
    
    settings().Physics.PhysicsEnvironmentalThrottle = Enum.EnviromentalPhysicsThrottle.Disabled
    settings().Physics.AllowSleep = false
    RunService:Set3dRenderingEnabled(false)
end

local function EnableRollback()
    if rollbackEnabled then return false end
    
    originalStats.health = LocalPlayer.Character and LocalPlayer.Character:FindFirstChildOfClass("Humanoid") and LocalPlayer.Character:FindFirstChildOfClass("Humanoid").Health
    originalStats.position = LocalPlayer.Character and LocalPlayer.Character:GetPivot().Position
    
    MegaLag()
    
    rollbackEnabled = true
    return true
end

local function DisableRollback()
    if not rollbackEnabled then return false end
    
    for _,v in pairs(heartbeatConnections) do
        pcall(function() v:Enable() end)
    end
    for _,v in pairs(steppedConnections) do
        pcall(function() v:Enable() end)
    end
    for _,v in pairs(renderConnections) do
        pcall(function() v:Enable() end)
    end
    
    heartbeatConnections = {}
    steppedConnections = {}
    renderConnections = {}
    
    settings().Physics.PhysicsEnvironmentalThrottle = Enum.EnviromentalPhysicsThrottle.Default
    settings().Physics.AllowSleep = true
    RunService:Set3dRenderingEnabled(true)
    
    if LocalPlayer.Character then
        local humanoid = LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
        if humanoid and originalStats.health then
            humanoid.Health = originalStats.health
        end
        if originalStats.position then
            LocalPlayer.Character:PivotTo(CFrame.new(originalStats.position))
        end
    end
    
    rollbackEnabled = false
    return true
end

local function HardRollback()
    MegaLag()
    
    local startTime = tick()
    while tick() - startTime < 3 do
        game:GetService("NetworkClient"):SetOutgoingKBPSLimit(0.5)
        task.wait()
    end
    
    DisableRollback()
    task.wait(0.1)
    TPS:Teleport(game.PlaceId, LocalPlayer)
end

local Window = Rayfield:CreateWindow({
    Name = "ALS | PolleserHub",
    LoadingTitle = "ALS | PolleserHub",
    LoadingSubtitle = "by Polleser",
    ConfigurationSaving = { Enabled = false },
})

local MainTab = Window:CreateTab("Rollback")

local RollbackToggle = MainTab:CreateToggle({
    Name = "Rollback (Turn On Before Rolling)",
    CurrentValue = false,
    Flag = "RollbackToggle",
    Callback = function(Value)
        if Value then
            if EnableRollback() then
                Rayfield:Notify({
                    Title = "Rollback Activated",
                    Content = "Game updates frozen - changes won't save!",
                    Duration = 3,
                    Image = "rbxassetid://4483345998"
                })
            end
        else
            if DisableRollback() then
                Rayfield:Notify({
                    Title = "Rollback Deactivated",
                    Content = "Game is saving changes normally",
                    Duration = 3,
                    Image = "rbxassetid://4483345998"
                })
            end
        end
    end,
})

MainTab:CreateButton({
    Name = "Press if not Satisfied (RollBack)",
    Callback = function()
        Rayfield:Notify({
            Title = "Performing Rollback",
            Content = "Crashing updates before rejoin...",
            Duration = 2,
            Image = "rbxassetid://4483345998"
        })
        HardRollback()
    end,
})

MainTab:CreateSection("Status")
local StatusLabel = MainTab:CreateLabel({ Name = "Current Mode", Text = "ACTIVE (Changes save)" })

spawn(function()
    while task.wait(0.5) do
        StatusLabel:Set(RollbackToggle.CurrentValue and "ROLLBACK ACTIVE" or "ACTIVE")
    end
end)

MainTab:CreateKeybind({
    Name = "Quick Toggle (Default: N)",
    CurrentKeybind = "N",
    HoldToInteract = false,
    Flag = "RollbackKeybind",
    Callback = function()
        RollbackToggle:Set(not RollbackToggle.CurrentValue)
    end,
})
