local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Players = game:GetService("Players")
local TPS = game:GetService("TeleportService")
local RunService = game:GetService("RunService")
local LocalPlayer = Players.LocalPlayer
local rollbackEnabled = false
local originalStats = {}
local heartbeatConnections = {}
local propertyWatchers = {}
local changedConnections = {}

-- Universal state freezing
local function FreezeGameState()
    -- Store character state
    if LocalPlayer.Character then
        local humanoid = LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
        if humanoid then
            originalStats.health = humanoid.Health
            originalStats.maxHealth = humanoid.MaxHealth
            originalStats.position = LocalPlayer.Character:GetPivot().Position
            originalStats.state = humanoid:GetState()
        end
    end
    
    -- Store player data
    originalStats.playerData = {}
    for _,v in pairs(LocalPlayer:GetChildren()) do
        if v:IsA("Folder") or v:IsA("Model") then
            originalStats.playerData[v.Name] = v:Clone()
        end
    end
    
    -- Prevent property changes
    propertyWatchers = {}
    local function watchProperties(instance)
        for _,prop in pairs(instance.Changed:GetConnections()) do
            table.insert(propertyWatchers, prop)
            prop:Disconnect()
        end
    end
    
    -- Watch important instances
    if LocalPlayer.Character then
        watchProperties(LocalPlayer.Character)
        for _,descendant in pairs(LocalPlayer.Character:GetDescendants()) do
            watchProperties(descendant)
        end
    end
    
    -- Watch player data changes
    for _,child in pairs(LocalPlayer:GetChildren()) do
        watchProperties(child)
    end
    
    -- Disable changed events
    changedConnections = {}
    for _,conn in pairs(getconnections(LocalPlayer.Changed)) do
        table.insert(changedConnections, conn)
        conn:Disable()
    end
    if LocalPlayer.Character then
        for _,conn in pairs(getconnections(LocalPlayer.Character.Changed)) do
            table.insert(changedConnections, conn)
            conn:Disable()
        end
    end
    
    -- Slow down the game loop
    for _,v in pairs(getconnections(RunService.Heartbeat)) do
        table.insert(heartbeatConnections, v)
        v:Disable()
    end
    for _,v in pairs(getconnections(RunService.Stepped)) do
        table.insert(heartbeatConnections, v)
        v:Disable()
    end
    for _,v in pairs(getconnections(RunService.RenderStepped)) do
        table.insert(heartbeatConnections, v)
        v:Disable()
    end
end

local function UnfreezeGameState()
    -- Re-enable all connections
    for _,v in pairs(heartbeatConnections) do
        pcall(function() v:Enable() end)
    end
    for _,v in pairs(propertyWatchers) do
        pcall(function() v:Enable() end)
    end
    for _,v in pairs(changedConnections) do
        pcall(function() v:Enable() end)
    end
    
    heartbeatConnections = {}
    propertyWatchers = {}
    changedConnections = {}
    
    -- Restore player data
    if originalStats.playerData then
        for name,data in pairs(originalStats.playerData) do
            local existing = LocalPlayer:FindFirstChild(name)
            if existing then
                existing:Destroy()
            end
            data:Clone().Parent = LocalPlayer
        end
    end
    
    -- Restore character state
    if LocalPlayer.Character then
        local humanoid = LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
        if humanoid then
            if originalStats.health then humanoid.Health = originalStats.health end
            if originalStats.maxHealth then humanoid.MaxHealth = originalStats.maxHealth end
            if originalStats.position then 
                pcall(function()
                    LocalPlayer.Character:PivotTo(CFrame.new(originalStats.position))
                end)
            end
            if originalStats.state then 
                pcall(function()
                    humanoid:ChangeState(originalStats.state)
                end)
            end
        end
    end
end

local function EnableRollback()
    if rollbackEnabled then return false end
    
    FreezeGameState()
    rollbackEnabled = true
    return true
end

local function DisableRollback()
    if not rollbackEnabled then return false end
    
    UnfreezeGameState()
    rollbackEnabled = false
    return true
end

local function HardRollback()
    DisableRollback()
    task.wait(0.5)
    TPS:Teleport(game.PlaceId, LocalPlayer)
end

-- UI Setup
local Window = Rayfield:CreateWindow({
    Name = "Universal Rollback | PolleserHub",
    LoadingTitle = "Universal Rollback | PolleserHub",
    LoadingSubtitle = "by Polleser",
    ConfigurationSaving = { Enabled = false },
})

local MainTab = Window:CreateTab("Rollback")

local RollbackToggle = MainTab:CreateToggle({
    Name = "Rollback (Turn On Before Rolling)",
    CurrentValue = false,
    Flag = "RollbackToggle",
    Callback = function(Value)
        if Value then
            if EnableRollback() then
                Rayfield:Notify({
                    Title = "Rollback Activated",
                    Content = "Game state frozen - changes won't save!",
                    Duration = 3,
                    Image = "rbxassetid://4483345998"
                })
            else
                warn("Failed to enable rollback")
            end
        else
            if DisableRollback() then
                Rayfield:Notify({
                    Title = "Rollback Deactivated",
                    Content = "Game is saving changes normally",
                    Duration = 3,
                    Image = "rbxassetid://4483345998"
                })
            else
                warn("Failed to disable rollback")
            end
        end
    end,
})

MainTab:CreateButton({
    Name = "Press if not Satisfied (Rejoin)",
    Callback = function()
        Rayfield:Notify({
            Title = "Performing Rejoin",
            Content = "Rejoining server...",
            Duration = 2,
            Image = "rbxassetid://4483345998"
        })
        HardRollback()
    end,
})

MainTab:CreateKeybind({
    Name = "Quick Toggle (Default: N)",
    CurrentKeybind = "N",
    HoldToInteract = false,
    Flag = "RollbackKeybind",
    Callback = function()
        RollbackToggle:Set(not RollbackToggle.CurrentValue)
    end,
})

local StatusLabel = MainTab:CreateLabel("Status: INACTIVE")

spawn(function()
    while task.wait(0.5) do
        StatusLabel:Set(RollbackToggle.CurrentValue and "ROLLBACK ACTIVE (Changes not saving)" or "ACTIVE (Changes save)")
    end
end)
