local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Players = game:GetService("Players")
local TPS = game:GetService("TeleportService")
local RunService = game:GetService("RunService")
local LocalPlayer = Players.LocalPlayer
local rollbackEnabled = false
local originalStats = {}
local lagDelay = 0.5
local heartbeatConnections = {}
local networkLagEnabled = false
local originalRemoteEventFire
local originalRemoteFunctionInvoke

-- Enhanced lag simulation functions
local function EnableNetworkLag()
    if networkLagEnabled then return end
    
    -- Hook RemoteEvent firing
    originalRemoteEventFire = hookfunction(debug.getupvalue(RemoteEvent.FireServer, 1), function(...)
        if rollbackEnabled then
            wait(math.random(0.5, 2.0)) -- Random delay between 0.5-2 seconds
        end
        return originalRemoteEventFire(...)
    end)
    
    -- Hook RemoteFunction invoking
    originalRemoteFunctionInvoke = hookfunction(debug.getupvalue(RemoteFunction.InvokeServer, 1), function(...)
        if rollbackEnabled then
            wait(math.random(0.5, 2.0)) -- Random delay between 0.5-2 seconds
        end
        return originalRemoteFunctionInvoke(...)
    end)
    
    networkLagEnabled = true
end

local function DisableNetworkLag()
    if not networkLagEnabled then return end
    
    -- Restore original functions
    if originalRemoteEventFire then
        hookfunction(debug.getupvalue(RemoteEvent.FireServer, 1), originalRemoteEventFire)
    end
    
    if originalRemoteFunctionInvoke then
        hookfunction(debug.getupvalue(RemoteFunction.InvokeServer, 1), originalRemoteFunctionInvoke)
    end
    
    networkLagEnabled = false
end

local function FreezeGameState()
    -- Store all important character stats
    if LocalPlayer.Character then
        originalStats.health = LocalPlayer.Character:FindFirstChildOfClass("Humanoid") and LocalPlayer.Character:FindFirstChildOfClass("Humanoid").Health
        originalStats.position = LocalPlayer.Character:GetPivot().Position
        originalStats.state = LocalPlayer.Character:FindFirstChildOfClass("Humanoid"):GetState()
    end
    
    -- Disable physics and other services
    for _, service in pairs({workspace.Terrain, game:GetService("PhysicsService")}) do
        for _, part in pairs(service:GetDescendants()) do
            if part:IsA("BasePart") then
                part.Anchored = true
            end
        end
    end
end

local function UnfreezeGameState()
    -- Re-enable physics
    for _, service in pairs({workspace.Terrain, game:GetService("PhysicsService")}) do
        for _, part in pairs(service:GetDescendants()) do
            if part:IsA("BasePart") then
                part.Anchored = false
            end
        end
    end
    
    -- Restore character state
    if LocalPlayer.Character then
        local humanoid = LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
        if humanoid then
            if originalStats.health then humanoid.Health = originalStats.health end
            if originalStats.position then LocalPlayer.Character:PivotTo(CFrame.new(originalStats.position)) end
            if originalStats.state then humanoid:ChangeState(originalStats.state) end
        end
    end
end

local function EnableRollback()
    if rollbackEnabled then return false end
    
    -- Disable heartbeat to prevent game updates
    for _,v in pairs(getconnections(RunService.Heartbeat)) do
        table.insert(heartbeatConnections, v)
        v:Disable()
    end
    
    -- Enable lag simulation
    EnableNetworkLag()
    FreezeGameState()
    
    rollbackEnabled = true
    return true
end

local function DisableRollback()
    if not rollbackEnabled then return false end
    
    -- Re-enable heartbeat connections
    for _,v in pairs(heartbeatConnections) do
        pcall(function() v:Enable() end)
    end
    heartbeatConnections = {}
    
    -- Disable lag simulation
    DisableNetworkLag()
    UnfreezeGameState()
    
    rollbackEnabled = false
    return true
end

local function HardRollback()
    DisableRollback()
    task.wait(0.5)
    TPS:Teleport(game.PlaceId, LocalPlayer)
end

-- UI Setup
local Window = Rayfield:CreateWindow({
    Name = "Rollback | PolleserHub",
    LoadingTitle = "Rollback | PolleserHub",
    LoadingSubtitle = "by Polleser",
    ConfigurationSaving = { Enabled = false },
})

local MainTab = Window:CreateTab("Rollback")

local RollbackToggle = MainTab:CreateToggle({
    Name = "Rollback (Turn On Before Rolling)",
    CurrentValue = false,
    Flag = "RollbackToggle",
    Callback = function(Value)
        if Value then
            if EnableRollback() then
                Rayfield:Notify({
                    Title = "Rollback Activated",
                    Content = "Game state frozen - changes won't save!",
                    Duration = 3,
                    Image = "rbxassetid://4483345998"
                })
            end
        else
            if DisableRollback() then
                Rayfield:Notify({
                    Title = "Rollback Deactivated",
                    Content = "Game is saving changes normally",
                    Duration = 3,
                    Image = "rbxassetid://4483345998"
                })
            end
        end
    end,
})

MainTab:CreateButton({
    Name = "Press if not Satisfied (Rejoin)",
    Callback = function()
        Rayfield:Notify({
            Title = "Performing Rejoin",
            Content = "Rejoining server...",
            Duration = 2,
            Image = "rbxassetid://4483345998"
        })
        HardRollback()
    end,
})

MainTab:CreateSection("Status")
local StatusLabel = MainTab:CreateLabel({ Name = "Current Mode", Text = "ACTIVE (Changes save)" })

spawn(function()
    while task.wait(0.5) do
        StatusLabel:Set(RollbackToggle.CurrentValue and "ROLLBACK ACTIVE (Changes not saving)" or "ACTIVE (Changes save)")
    end
end)

MainTab:CreateKeybind({
    Name = "Quick Toggle (Default: N)",
    CurrentKeybind = "N",
    HoldToInteract = false,
    Flag = "RollbackKeybind",
    Callback = function()
        RollbackToggle:Set(not RollbackToggle.CurrentValue)
    end,
})

MainTab:CreateSlider({
    Name = "Network Lag Intensity",
    Range = {0, 5},
    Increment = 0.5,
    Suffix = "seconds",
    CurrentValue = 0.5,
    Flag = "LagIntensity",
    Callback = function(Value)
        lagDelay = Value
    end,
})

MainTab:CreateToggle({
    Name = "Freeze Physics (More convincing)",
    CurrentValue = true,
    Flag = "FreezePhysics",
    Callback = function(Value)
        -- This is already handled in the main rollback functions
    end,
})
