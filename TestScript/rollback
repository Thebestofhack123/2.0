local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

-- Services
local Players = game:GetService("Players")
local TPS = game:GetService("TeleportService")
local RunService = game:GetService("RunService")
local Physics = settings().Physics
local Workspace = game:GetService("Workspace")

-- Variables
local LocalPlayer = Players.LocalPlayer
local currentSnapshot = nil
local rollbackEnabled = false
local originalTimestep = RunService.Heartbeat:Wait()
local originalSettings = {
    PhysicsEnvironmentalThrottle = Physics.PhysicsEnvironmentalThrottle,
    AllowSleep = Physics.AllowSleep,
    Gravity = Workspace.Gravity,
    GlobalWind = Workspace.GlobalWind
}

-- Function to create comprehensive snapshot
local function CreateSnapshot()
    local snapshot = {
        characterState = {},
        position = nil,
        camera = nil
    }
    
    if LocalPlayer.Character then
        local humanoid = LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
        if humanoid then
            snapshot.characterState = {
                health = humanoid.Health,
                maxHealth = humanoid.MaxHealth,
                walkSpeed = humanoid.WalkSpeed,
                jumpPower = humanoid.JumpPower,
                autoRotate = humanoid.AutoRotate
            }
        end
        snapshot.position = LocalPlayer.Character:GetPivot().Position
    end
    
    if workspace.CurrentCamera then
        snapshot.camera = {
            CFrame = workspace.CurrentCamera.CFrame,
            FieldOfView = workspace.CurrentCamera.FieldOfView
        }
    end
    
    return snapshot
end

-- Freeze all network traffic
local function FreezeNetwork()
    local mt = getrawmetatable(game)
    local old = mt.__namecall
    setreadonly(mt, false)
    
    mt.__namecall = newcclosure(function(self, ...)
        local method = getnamecallmethod()
        if rollbackEnabled and (method == "InvokeServer" or method == "FireServer") then
            return nil
        end
        return old(self, ...)
    end)
    
    local oldIndex = mt.__index
    mt.__index = newcclosure(function(self, k)
        if rollbackEnabled and tostring(k) == "Changed" then
            return function() return nil end
        end
        return oldIndex(self, k)
    end)
    
    setreadonly(mt, true)
end

-- Enable rollback and take snapshot
local function EnableRollback()
    if not rollbackEnabled then
        -- Create comprehensive snapshot
        currentSnapshot = CreateSnapshot()
        
        -- Freeze physics and environment
        Physics.PhysicsEnvironmentalThrottle = Enum.EnviromentalPhysicsThrottle.Disabled
        Physics.AllowSleep = false
        Workspace.Gravity = 0
        Workspace.GlobalWind = Vector3.new(0, 0, 0)
        
        -- Freeze remote events
        FreezeNetwork()
        
        -- Slow down the game simulation
        RunService:SetTimeScale(0.0001) -- Almost completely frozen
        
        -- Disable rendering (optional)
        if pcall(function() RunService:Set3dRenderingEnabled(false) end) then
            -- Executor supports this call
        end
        
        rollbackEnabled = true
        return true
    end
    return false
end

-- Disable rollback and restore state
local function DisableRollback()
    if rollbackEnabled then
        -- Restore physics and environment
        Physics.PhysicsEnvironmentalThrottle = originalSettings.PhysicsEnvironmentalThrottle
        Physics.AllowSleep = originalSettings.AllowSleep
        Workspace.Gravity = originalSettings.Gravity
        Workspace.GlobalWind = originalSettings.GlobalWind
        
        -- Restore time scale
        RunService:SetTimeScale(1)
        
        -- Re-enable rendering
        if pcall(function() RunService:Set3dRenderingEnabled(true) end) then
            -- Executor supports this call
        end
        
        -- Restore network traffic
        local mt = getrawmetatable(game)
        setreadonly(mt, false)
        mt.__namecall = nil
        mt.__index = nil
        setreadonly(mt, true)
        
        -- Restore character from snapshot
        if LocalPlayer.Character and currentSnapshot then
            local humanoid = LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
            if humanoid then
                for k,v in pairs(currentSnapshot.characterState) do
                    if humanoid[k] ~= nil then
                        pcall(function() humanoid[k] = v end)
                    end
                end
            end
            
            if currentSnapshot.position then
                pcall(function()
                    LocalPlayer.Character:PivotTo(CFrame.new(currentSnapshot.position))
                end)
            end
        end
        
        -- Restore camera
        if currentSnapshot and currentSnapshot.camera and workspace.CurrentCamera then
            pcall(function()
                workspace.CurrentCamera.CFrame = currentSnapshot.camera.CFrame
                workspace.CurrentCamera.FieldOfView = currentSnapshot.camera.FieldOfView
            end)
        end
        
        rollbackEnabled = false
        return true
    end
    return false
end

-- Hard rollback (rejoin)
local function HardRollback()
    DisableRollback()
    task.wait(0.5)
    TPS:Teleport(game.PlaceId, LocalPlayer)
end

-- Create UI
local Window = Rayfield:CreateWindow({
    Name = "Rollback | PolleserHub",
    LoadingTitle = "Rollback | PolleserHub",
    LoadingSubtitle = "by Polleser",
    ConfigurationSaving = { Enabled = false },
})

local MainTab = Window:CreateTab("Rollback")

local RollbackToggle = MainTab:CreateToggle({
    Name = "Rollback (Toggle Before Rolling)",
    CurrentValue = false,
    Flag = "RollbackToggle",
    Callback = function(Value)
        if Value then
            if EnableRollback() then
                Rayfield:Notify({
                    Title = "Enabled Rollback",
                    Content = "Enabled Rollback (it'll freeze the game)",
                    Duration = 3,
                    Image = "rbxassetid://4483345998"
                })
            end
        else
            if DisableRollback() then
                Rayfield:Notify({
                    Title = "State Disabled Rollback",
                    Content = "Game is saving changes normally",
                    Duration = 3,
                    Image = "rbxassetid://4483345998"
                })
            end
        end
    end,
})

MainTab:CreateButton({
    Name = "Press if result not good (Rejoin)",
    Callback = function()
        Rayfield:Notify({
            Title = "Performing Rejoin",
            Content = "Rejoining server...",
            Duration = 2,
            Image = "rbxassetid://4483345998"
        })
        HardRollback()
    end,
})

MainTab:CreateKeybind({
    Name = "Quick Toggle (Default: N)",
    CurrentKeybind = "N",
    HoldToInteract = false,
    Flag = "RollbackKeybind",
    Callback = function()
        RollbackToggle:Set(not RollbackToggle.CurrentValue)
    end,
})
