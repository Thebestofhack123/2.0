-- Executor-friendly Rayfield load with fallback
local Rayfield = nil
local success, err = pcall(function()
    Rayfield = loadstring(game:HttpGet("https://sirius.menu/rayfield"))()
end)

if not success then
    Rayfield = loadstring(game:HttpGet("https://raw.githubusercontent.com/shlexware/Rayfield/main/source"))()
end

-- Services
local Players = game:GetService("Players")
local TPS = game:GetService("TeleportService")
local RunService = game:GetService("RunService")
local Physics = settings().Physics
local Workspace = game:GetService("Workspace")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

-- Variables
local LocalPlayer = Players.LocalPlayer
local currentSnapshot = nil
local rollbackEnabled = false
local originalTimestep = RunService.Heartbeat:Wait()
local originalSettings = {
    PhysicsEnvironmentalThrottle = Physics.PhysicsEnvironmentalThrottle,
    AllowSleep = Physics.AllowSleep,
    Gravity = Workspace.Gravity,
    GlobalWind = Workspace.GlobalWind
}

-- Enhanced remote detection
local function FindRemote(parent, names)
    for _, name in pairs(names) do
        local remote = parent:FindFirstChild(name, true)
        if remote and (remote:IsA("RemoteEvent") or remote:IsA("RemoteFunction")) then
            return remote
        end
    end
    return nil
end

local blockedRemotes = {}
local queuedRemoteCalls = {}

-- Function to block all network traffic
local function BlockAllNetwork()
    -- Find and block all remote events/functions
    for _, instance in pairs(ReplicatedStorage:GetDescendants()) do
        if (instance:IsA("RemoteEvent") or instance:IsA("RemoteFunction")) and not blockedRemotes[instance] then
            blockedRemotes[instance] = true
        end
    end
    
    -- Also check other important services
    for _, serviceName in pairs({"ReplicatedFirst", "ServerScriptService", "ServerStorage"}) do
        local service = game:GetService(serviceName)
        if service then
            for _, instance in pairs(service:GetDescendants()) do
                if (instance:IsA("RemoteEvent") or instance:IsA("RemoteFunction")) and not blockedRemotes[instance] then
                    blockedRemotes[instance] = true
                end
            end
        end
    end
end

-- Comprehensive snapshot with more game state
local function CreateSnapshot()
    local snapshot = {
        characterState = {},
        position = nil,
        camera = nil,
        time = os.time(),
        playerStats = {}
    }

    if LocalPlayer.Character then
        local humanoid = LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
        if humanoid then
            snapshot.characterState = {
                health = humanoid.Health,
                maxHealth = humanoid.MaxHealth,
                walkSpeed = humanoid.WalkSpeed,
                jumpPower = humanoid.JumpPower,
                autoRotate = humanoid.AutoRotate,
                state = humanoid:GetState()
            }
        end
        
        -- Save all important parts
        snapshot.position = LocalPlayer.Character:GetPivot().Position
        snapshot.parts = {}
        for _, part in pairs(LocalPlayer.Character:GetDescendants()) do
            if part:IsA("BasePart") then
                snapshot.parts[part.Name] = {
                    Position = part.Position,
                    CFrame = part.CFrame,
                    Size = part.Size,
                    Anchored = part.Anchored
                }
            end
        end
    end

    -- Save camera state
    if workspace.CurrentCamera then
        snapshot.camera = {
            CFrame = workspace.CurrentCamera.CFrame,
            FieldOfView = workspace.CurrentCamera.FieldOfView,
            CameraType = workspace.CurrentCamera.CameraType
        }
    end

    -- Save player stats if available
    for _, stat in pairs(LocalPlayer:GetChildren()) do
        if stat:IsA("NumberValue") or stat:IsA("IntValue") or stat:IsA("BoolValue") then
            snapshot.playerStats[stat.Name] = stat.Value
        end
    end

    return snapshot
end

-- Enhanced network freezing
local oldNamecall, oldIndex
local function FreezeNetwork()
    local mt = getrawmetatable(game)
    if not mt then return end
    
    oldNamecall = oldNamecall or mt.__namecall
    oldIndex = oldIndex or mt.__index
    
    setreadonly(mt, false)

    mt.__namecall = function(self, ...)
        local method = getnamecallmethod()
        if rollbackEnabled then
            -- Block all remote communication
            if (method == "InvokeServer" or method == "FireServer") then
                table.insert(queuedRemoteCalls, {
                    remote = self,
                    method = method,
                    args = {...}
                })
                return nil
            end
            
            -- Block other potentially dangerous calls
            if method == "Kick" or method == "Destroy" then
                return nil
            end
        end
        return oldNamecall(self, ...)
    end

    mt.__index = function(self, k)
        if rollbackEnabled then
            -- Prevent changes from being detected
            if tostring(k) == "Changed" then
                return function() return nil end
            end
            
            -- Prevent certain properties from being accessed
            if tostring(k) == "Parent" or tostring(k) == "ClassName" then
                return oldIndex(self, k)
            end
        end
        return oldIndex(self, k)
    end

    setreadonly(mt, true)
end

-- Freeze the entire game state
local function FreezeGameState()
    -- Freeze physics
    pcall(function()
        Physics.PhysicsEnvironmentalThrottle = Enum.EnviromentalPhysicsThrottle.Disabled
        Physics.AllowSleep = false
        Workspace.Gravity = 0
        Workspace.GlobalWind = Vector3.new(0, 0, 0)
    end)
    
    -- Freeze time
    pcall(function() 
        RunService:SetTimeScale(0.0001)
        RunService:Set3dRenderingEnabled(false)
    end)
    
    -- Freeze character
    if LocalPlayer.Character then
        for _, part in pairs(LocalPlayer.Character:GetDescendants()) do
            if part:IsA("BasePart") then
                pcall(function() part.Anchored = true end)
                pcall(function() part.CanCollide = false end)
                pcall(function() part.Velocity = Vector3.new() end)
            end
        end
    end
end

-- Enable complete freeze
local function EnableCompleteFreeze()
    if not rollbackEnabled then
        queuedRemoteCalls = {}
        currentSnapshot = CreateSnapshot()
        
        -- Block all network traffic
        BlockAllNetwork()
        FreezeNetwork()
        
        -- Freeze game state
        FreezeGameState()
        
        rollbackEnabled = true
        return true
    end
    return false
end

-- Restore game state
local function RestoreGameState()
    -- Restore physics
    pcall(function()
        Physics.PhysicsEnvironmentalThrottle = originalSettings.PhysicsEnvironmentalThrottle
        Physics.AllowSleep = originalSettings.AllowSleep
        Workspace.Gravity = originalSettings.Gravity
        Workspace.GlobalWind = originalSettings.GlobalWind
        RunService:SetTimeScale(1)
        RunService:Set3dRenderingEnabled(true)
    end)
    
    -- Restore metatable
    local mt = getrawmetatable(game)
    if mt then
        setreadonly(mt, false)
        mt.__namecall = oldNamecall
        mt.__index = oldIndex
        setreadonly(mt, true)
    end
    
    -- Restore character
    if LocalPlayer.Character and currentSnapshot then
        -- Restore humanoid state
        local humanoid = LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
        if humanoid then
            for k, v in pairs(currentSnapshot.characterState) do
                pcall(function() humanoid[k] = v end)
            end
            pcall(function() humanoid:ChangeState(currentSnapshot.characterState.state) end)
        end
        
        -- Restore parts
        for partName, partData in pairs(currentSnapshot.parts or {}) do
            local part = LocalPlayer.Character:FindFirstChild(partName)
            if part and part:IsA("BasePart") then
                pcall(function() part.Anchored = partData.Anchored end)
                pcall(function() part.CFrame = partData.CFrame end)
                pcall(function() part.Size = partData.Size end)
            end
        end
        
        -- Restore position
        pcall(function()
            if currentSnapshot.position then
                LocalPlayer.Character:PivotTo(CFrame.new(currentSnapshot.position))
            end
        end)
    end
    
    -- Restore camera
    pcall(function()
        if currentSnapshot and currentSnapshot.camera and workspace.CurrentCamera then
            workspace.CurrentCamera.CFrame = currentSnapshot.camera.CFrame
            workspace.CurrentCamera.FieldOfView = currentSnapshot.camera.FieldOfView
            workspace.CurrentCamera.CameraType = currentSnapshot.camera.CameraType
        end
    end)
    
    -- Restore player stats
    for statName, statValue in pairs(currentSnapshot.playerStats or {}) do
        local stat = LocalPlayer:FindFirstChild(statName)
        if stat then
            pcall(function() stat.Value = statValue end)
        end
    end
end

-- Disable freeze and restore state
local function DisableCompleteFreeze()
    if rollbackEnabled then
        RestoreGameState()
        ProcessQueuedRemoteCalls()
        rollbackEnabled = false
        return true
    end
    return false
end

-- Process queued remote calls
local function ProcessQueuedRemoteCalls()
    if #queuedRemoteCalls > 0 then
        Rayfield:Notify({
            Title = "Processing Actions",
            Content = "Processing "..#queuedRemoteCalls.." queued actions",
            Duration = 3,
            Image = "rbxassetid://4483345998"
        })
        
        for _, call in ipairs(queuedRemoteCalls) do
            pcall(function()
                if call.method == "InvokeServer" then
                    call.remote:InvokeServer(unpack(call.args))
                elseif call.method == "FireServer" then
                    call.remote:FireServer(unpack(call.args))
                end
            end)
        end
        queuedRemoteCalls = {}
    end
end

-- Hard rollback (rejoin)
local function HardRollback()
    queuedRemoteCalls = {}
    DisableCompleteFreeze()
    task.wait(0.5)
    TPS:Teleport(game.PlaceId, LocalPlayer)
end

-- Create UI
local Window = Rayfield:CreateWindow({
    Name = "Rollback | PolleserHub",
    LoadingTitle = "Rollback | PolleserHub",
    LoadingSubtitle = "by Polleser",
    ConfigurationSaving = {Enabled = false}
})

local MainTab = Window:CreateTab("Rollback")

local FreezeToggle = MainTab:CreateToggle({
    Name = "Rollback (Turn on before rolling)",
    CurrentValue = false,
    Flag = "FreezeToggle",
    Callback = function(Value)
        if Value then
            if EnableCompleteFreeze() then
                Rayfield:Notify({
                    Title = "Game Frozen",
                    Content = "Game state is completely frozen - no changes will be saved",
                    Duration = 3,
                    Image = "rbxassetid://4483345998"
                })
            end
        else
            if DisableCompleteFreeze() then
                Rayfield:Notify({
                    Title = "Game Unfrozen",
                    Content = "Game is now saving changes normally",
                    Duration = 3,
                    Image = "rbxassetid://4483345998"
                })
            end
        end
    end
})

MainTab:CreateButton({
    Name = "Rejoin if result not good",
    Callback = function()
        Rayfield:Notify({
            Title = "Performing Rejoin",
            Content = "Rejoining server to ensure clean state...",
            Duration = 2,
            Image = "rbxassetid://4483345998"
        })
        HardRollback()
    end
})

MainTab:CreateKeybind({
    Name = "Quick Freeze Toggle (Default: N)",
    CurrentKeybind = "N",
    HoldToInteract = false,
    Flag = "FreezeKeybind",
    Callback = function()
        FreezeToggle:Set(not FreezeToggle.CurrentValue)
    end
})

-- Prevent white screen by keeping rendering enabled
RunService.RenderStepped:Connect(function()
    if rollbackEnabled then
        -- Keep rendering enabled but frozen
        RunService:Set3dRenderingEnabled(true)
    end
end)
